#
# Continuous Integration Workflow for libseccomp
#
# Copyright (c) 2020 Oracle and/or its affiliates.
# Author: Tom Hromatka <tom.hromatka@oracle.com>
#

#
# This library is free software; you can redistribute it and/or modify it
# under the terms of version 2.1 of the GNU Lesser General Public License as
# published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
# for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this library; if not, see <http://www.gnu.org/licenses>.
#

name: Continuous Integration
on: ["push", "pull_request"]

jobs:
  runtests:
    name: amd64
    runs-on: ubuntu-20.04

    steps:
    # cython is installed to the following path
    - name: Add Cython to the path
      run: echo "/home/runner/.local/bin" >> $GITHUB_PATH
    - name: Checkout from github
      uses: actions/checkout@v2
    - name: Configure and build
      uses: ./.github/actions/setup-libseccomp
    - name: Run tests
      uses: ./.github/actions/run-tests

  aarch64:
    name: aarch64
    runs-on: ubuntu-latest

    steps:
    - name: Checkout from github
      uses: actions/checkout@v2
    - name: Reset the container
      run: docker run --rm --privileged multiarch/qemu-user-static:register --reset
    - name: Install dependencies
      uses: docker://multiarch/ubuntu-core:arm64-bionic
      with:
        args: >
          bash -c
          "apt-get update &&
          apt-get install -y build-essential dh-autoreconf valgrind clang lcov gperf astyle codespell"
    - name: Install cython
      uses: docker://multiarch/ubuntu-core:arm64-bionic
      with:
        args: >
          bash -c
          "apt-get update &&
          apt-get install -y python3.6 python-pip &&
          pip install --upgrade pip &&
          pip install cython"
    - name: Configure and build
      uses: docker://multiarch/ubuntu-core:arm64-bionic
      with:
        args: >
          bash -c "./autogen.sh && ./configure --enable-python && make check-build"
    - name: Run tests
      uses: docker://multiarch/ubuntu-core:arm64-bionic
      with:
        args: >
          bash -c "LIBSECCOMP_TSTCFG_STRESSCNT=5 make check"
    - name: Run live tests
      uses: docker://multiarch/ubuntu-core:arm64-bionic
      with:
        args: >
          bash -c "LIBSECCOMP_TSTCFG_TYPE=live LIBSECCOMP_TSTCFG_MODE_LIST=c make -C tests check"
#    - name: Live tests
#      run: LIBSECCOMP_TSTCFG_TYPE=live LIBSECCOMP_TSTCFG_MODE_LIST=c make -C tests check
#    - name: Scan build
#      if: ${{ matrix.arch }} == "amd64"
#      run: |
#        make clean
#        ./configure
#        scan-build --status-bugs make
